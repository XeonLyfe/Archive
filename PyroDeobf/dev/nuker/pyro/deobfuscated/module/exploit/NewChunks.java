//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package dev.nuker.pyro.deobfuscated.module.exploit;

import net.minecraft.client.renderer.RenderGlobal;
import org.lwjgl.opengl.GL11;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.util.math.AxisAlignedBB;
import dev.nuker.pyro.deobfuscated.util.render.RenderUtil;
import net.minecraft.network.play.server.SPacketChunkData;
import dev.nuker.pyro.deobfuscated.events.MinecraftEvent;
import java.util.concurrent.CopyOnWriteArrayList;
import dev.nuker.pyro.deobfuscated.events.render.RenderEvent;
import dev.nuker.pyro.deobfuscated.events.bus.EventHandler;
import dev.nuker.pyro.deobfuscated.events.network.EventServerPacket;
import dev.nuker.pyro.deobfuscated.events.bus.Listener;
import dev.nuker.pyro.deobfuscated.util.Pair;
import java.util.List;
import dev.nuker.pyro.deobfuscated.module.Value;
import dev.nuker.pyro.deobfuscated.module.Module;

public class NewChunks extends Module
{
    public Value<Boolean> Render;
    private List<Pair<Integer, Integer>> chunkDataList;
    @EventHandler
    private Listener<EventServerPacket> onServerPacket;
    @EventHandler
    private Listener<RenderEvent> OnRenderEvent;
    
    public NewChunks() {
        super("NewChunks", new String[] { "ChunkGen" }, "Highlights newly generated chunks", "NONE", 8380487, ModuleType.EXPLOIT);
        this.Render = new Value<Boolean>("Render", new String[] { "R" }, "Renders the new chunks in the world", true);
        this.chunkDataList = new CopyOnWriteArrayList<Pair<Integer, Integer>>();
        SPacketChunkData packet;
        final SPacketChunkData sPacketChunkData;
        Pair<Integer, Integer> chunk;
        this.onServerPacket = new Listener<EventServerPacket>(event -> {
            if (event.getStage() != MinecraftEvent.Stage.Pre) {
                return;
            }
            else {
                if (event.getPacket() instanceof SPacketChunkData) {
                    packet = (SPacketChunkData)event.getPacket();
                    if (!packet.isFullChunk()) {
                        this.chunkDataList.removeIf(chunkData -> chunkData.getFirst() == sPacketChunkData.getChunkX() && (int)chunkData.getSecond() == sPacketChunkData.getChunkZ());
                        chunk = new Pair<Integer, Integer>(packet.getChunkX(), packet.getChunkZ());
                        if (!this.chunkDataList.contains(chunk)) {
                            this.chunkDataList.add(chunk);
                        }
                    }
                }
                return;
            }
        });
        float x;
        float z;
        AxisAlignedBB bb;
        AxisAlignedBB t;
        this.OnRenderEvent = new Listener<RenderEvent>(p_Event -> {
            if (!(!this.Render.getValue())) {
                if (this.mc.getRenderManager() != null) {
                    this.chunkDataList.forEach(chunkData -> {
                        x = (float)(chunkData.getFirst() * 16);
                        z = (float)((int)chunkData.getSecond() * 16);
                        RenderUtil.camera.setPosition(this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY, this.mc.getRenderViewEntity().posZ);
                        bb = new AxisAlignedBB(x - this.mc.getRenderManager().viewerPosX, 0.0 - this.mc.getRenderManager().viewerPosY, z - this.mc.getRenderManager().viewerPosZ, x + 16.0f - this.mc.getRenderManager().viewerPosX, 1.0 - this.mc.getRenderManager().viewerPosY, z + 16.0f - this.mc.getRenderManager().viewerPosZ);
                        t = new AxisAlignedBB((double)x, 0.0, (double)z, (double)(x + 16.0f), 1.0, (double)(z + 16.0f));
                        if (RenderUtil.camera.isBoundingBoxInFrustum(t)) {
                            GlStateManager.pushMatrix();
                            GlStateManager.enableBlend();
                            GlStateManager.disableDepth();
                            GlStateManager.tryBlendFuncSeparate(770, 771, 0, 1);
                            GlStateManager.disableTexture2D();
                            GlStateManager.depthMask(false);
                            GL11.glEnable(2848);
                            GL11.glHint(3154, 4354);
                            GL11.glLineWidth(1.5f);
                            RenderGlobal.renderFilledBox(bb.minX, bb.minY, bb.minZ, bb.maxX, bb.minY, bb.maxZ, 0.6f, 0.0f, 0.9333333f, 0.5f);
                            GL11.glDisable(2848);
                            GlStateManager.depthMask(true);
                            GlStateManager.enableDepth();
                            GlStateManager.enableTexture2D();
                            GlStateManager.disableBlend();
                            GlStateManager.popMatrix();
                        }
                    });
                }
            }
        });
    }
}
