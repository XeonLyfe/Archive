// 
// Decompiled by Procyon v0.5.36
// 

package dev.nuker.pyro.deobfuscated.module.exploit;

import net.minecraft.util.EnumHand;
import net.minecraft.network.play.client.CPacketAnimation;
import dev.nuker.pyro.deobfuscated.events.MinecraftEvent;
import dev.nuker.pyro.deobfuscated.events.player.EventPlayerSwingArm;
import dev.nuker.pyro.deobfuscated.events.network.EventClientPacket;
import dev.nuker.pyro.deobfuscated.events.bus.EventHandler;
import dev.nuker.pyro.deobfuscated.events.player.EventPlayerUpdate;
import dev.nuker.pyro.deobfuscated.events.bus.Listener;
import dev.nuker.pyro.deobfuscated.module.Value;
import dev.nuker.pyro.deobfuscated.module.Module;

public class Swing extends Module
{
    public final Value<String> Mode;
    @EventHandler
    private Listener<EventPlayerUpdate> onPlayerUpdate;
    @EventHandler
    private Listener<EventClientPacket> onClientPacket;
    @EventHandler
    private Listener<EventPlayerSwingArm> SwingArm;
    
    public Swing() {
        super("Swing", new String[] { "AntiSwing" }, "Prevents swinging server-side", "NONE", 9250011, ModuleType.EXPLOIT);
        this.Mode = new Value<String>("Mode", new String[] { "Mode", "M" }, "The Swining mode to use", "Packet");
        this.onPlayerUpdate = new Listener<EventPlayerUpdate>(event -> this.setMetaData(this.getMetaData()));
        this.onClientPacket = new Listener<EventClientPacket>(event -> {
            if (event.getStage() != MinecraftEvent.Stage.Pre) {
                return;
            }
            else {
                if (event.getPacket() instanceof CPacketAnimation && this.Mode.getValue().equals("Packet")) {
                    event.cancel();
                }
                return;
            }
        });
        this.SwingArm = new Listener<EventPlayerSwingArm>(event -> {
            if (this.Mode.getValue().equals("Full")) {
                event.cancel();
            }
            else if (this.Mode.getValue().equals("Offhand")) {
                event.Hand = EnumHand.OFF_HAND;
            }
            return;
        });
        this.setMetaData(this.getMetaData());
        this.Mode.addString("Full");
        this.Mode.addString("Packet");
        this.Mode.addString("Offhand");
    }
    
    @Override
    public String getMetaData() {
        return this.Mode.getValue().toString();
    }
}
