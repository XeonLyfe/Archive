package dev.binclub.binscure.processors.exploit

import dev.binclub.binscure.IClassProcessor
import dev.binclub.binscure.configuration.ConfigurationManager.rootConfig
import dev.binclub.binscure.utils.versionAtMost
import org.objectweb.asm.Attribute
import org.objectweb.asm.Opcodes
import org.objectweb.asm.tree.ClassNode
import java.io.ByteArrayOutputStream
import java.io.DataOutputStream
import kotlin.random.Random

/**
 *
 *
 * @author cookiedragon234 17/Mar/2020
 */
object BadAttributeExploit: IClassProcessor {
	override val progressDescription: String
		get() = "Exploiting class file parsers"
	override val config = rootConfig.crasher
	
	override fun process(classes: MutableCollection<ClassNode>, passThrough: MutableMap<String, ByteArray>) {
		if (!config.enabled || !config.antiAsm)
			return
		
		val sourceBytes = ByteArrayOutputStream().also {
			DataOutputStream(it).writeShort(Int.MIN_VALUE)
		}.toByteArray()
		
		for (classNode in classes) {
			if (isExcluded(classNode) || !classNode.versionAtMost(Opcodes.V1_8))
				continue
			
			classNode.attrs = (classNode.attrs ?: arrayListOf()).also {
				it.add(DummyAttribute("NestHost", sourceBytes))
				it.add(DummyAttribute("StackMapTable"))
				it.add(DummyAttribute("Exceptions"))
				it.add(DummyAttribute("Module"))
			}
			classNode.fields?.forEach { field ->
				field.attrs = (field.attrs ?: arrayListOf()).also {
					it.add(DummyAttribute("Code"))
					it.add(DummyAttribute("BootstrapMethods"))
					it.add(DummyAttribute("Exceptions"))
				}
			}
			classNode.methods?.forEach { method ->
				method.attrs = (method.attrs ?: arrayListOf()).also {
					it.add(DummyAttribute("NestHost", sourceBytes))
				}
			}
		}
	}
	
	private class DummyAttribute(name: String, bytes: ByteArray = ByteArray(random.nextInt(2))): Attribute(name) {
		init {
			content = bytes
		}
	}
}
