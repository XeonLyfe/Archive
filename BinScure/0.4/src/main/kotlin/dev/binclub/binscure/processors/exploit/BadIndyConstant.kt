package dev.binclub.binscure.processors.exploit

import dev.binclub.binscure.CObfuscator
import dev.binclub.binscure.CObfuscator.random
import dev.binclub.binscure.IClassProcessor
import dev.binclub.binscure.configuration.ConfigurationManager.rootConfig
import dev.binclub.binscure.processors.flow.MethodParameterObfuscator
import dev.binclub.binscure.processors.runtime.OpaqueRuntimeManager
import dev.binclub.binscure.processors.runtime.randomOpaqueJump
import dev.binclub.binscure.utils.add
import dev.binclub.binscure.utils.newLabel
import dev.binclub.binscure.utils.versionAtLeast
import dev.binclub.binscure.utils.random
import org.objectweb.asm.Handle
import org.objectweb.asm.Opcodes
import org.objectweb.asm.Opcodes.POP
import org.objectweb.asm.tree.ClassNode
import org.objectweb.asm.tree.InsnList
import org.objectweb.asm.tree.InvokeDynamicInsnNode
import org.objectweb.asm.tree.TryCatchBlockNode

/**
 * By adding an invokedynamic insn to a non existent bootstrap method we can crash procyon and similar bytecode parsers
 * (Sadly asm is immune)
 *
 * @author cookiedragon234 09/Mar/2020
 */
object BadIndyConstant: IClassProcessor {
	override val progressDescription: String
		get() = "Exploiting invoke dynamics"
	override val config = rootConfig.crasher
	
	override fun process(classes: MutableCollection<ClassNode>, passThrough: MutableMap<String, ByteArray>) {
		if (!config.enabled || !config.decompilers)
			return
		
		for (classNode in classes) {
			if (isExcluded(classNode))
				continue
			if (!classNode.versionAtLeast(Opcodes.V1_7))
				continue
			
			for (method in classNode.methods) {
				if (isExcluded(classNode, method))
					continue
				
				if (method.instructions?.first == null)
					continue
				
				val label = newLabel()
				val list = InsnList().apply {
					if (true) {
						add(randomOpaqueJump(label, mnStr = MethodParameterObfuscator.mnToStr(classNode, method)))
						add(InvokeDynamicInsnNode(
							null, null, null
						))
						add(InvokeDynamicInsnNode(
							"fuck", "()${descriptors.random(random)}", Handle(Opcodes.H_INVOKESTATIC, "a", "a", "(IIIIIIIIIIIIIIIIIIIIIIII)Ljava/lang/Throwable;")
						))
						add(POP)
						add(label)
					} else {
						val start = newLabel()
						val end = newLabel()
						val handler = newLabel()
						
						add(start)
						add(InvokeDynamicInsnNode(
							"hello", "()${descriptors.random(random)}", Handle(Opcodes.H_INVOKESTATIC, "a", "a", "(IIIIIIIIIIIIIIIIIIIIIIII)Ljava/lang/Throwable;")
						))
						add(handler)
						add(POP)
						add(end)
						
						method.tryCatchBlocks = method.tryCatchBlocks ?: arrayListOf()
						method.tryCatchBlocks.add(TryCatchBlockNode(start, end, handler, null))
					}
				}
				
				method.instructions.insert(list)
			}
		}
	}
	
	val descriptors = arrayOf("I", "Z", "B", "Ljava/lang/String;", "Ljava/lang/Throwable;")
}
